{"name": "test_change_email", "status": "broken", "statusDetails": {"message": "AttributeError: 'Response' object has no attribute 'staus_code'. Did you mean: 'status_code'?", "trace": "self = <Response [201]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:345: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x109188980>, s = '', idx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n            obj, end = self.scan_once(s, idx)\n        except StopIteration as err:\n>           raise JSONDecodeError(\"Expecting value\", s, err.value) from None\nE           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/json/decoder.py:363: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nargs = (<dm_api_account.apis.account_api.AccountAPI object at 0x10c0bfa10>,)\nkwargs = {'json': {'email': 'sgureev+1749307891@mail.ru', 'login': 'sgureev+1749307891', 'password': '123456789'}, 'method': 'POST', 'path': '/v1/account'}\nbody = {'email': 'sgureev+1749307891@mail.ru', 'login': 'sgureev+1749307891', 'password': '123456789'}\nresponse = <Response [201]>\ncurl = 'curl -X POST -H \\'Accept: */*\\' -H \\'Accept-Encoding: gzip, deflate\\' -H \\'Connection: keep-alive\\' -H \\'Content-Leng...reev+1749307891\", \"password\": \"123456789\", \"email\": \"sgureev+1749307891@mail.ru\"}\\' http://5.63.153.31:5051/v1/account'\nresponse_text = ''\n\n    def wrapper(*args, **kwargs):\n        body = kwargs.get(\"json\")\n        if body:\n            allure.attach(\n                json.dumps(body, indent=4),\n                name=\"request_body\",\n                attachment_type=allure.attachment_type.JSON\n            )\n        response = fn(*args, **kwargs)\n        curl = curlify.to_curl(response.request)\n        allure.attach(curl, name='curl', attachment_type=allure.attachment_type.TEXT)\n        try:\n>           response_json = response.json()\n\n../restclient/utilities.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [201]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Expecting value: line 1 column 1 (char 0)\n\n/Library/Frameworks/Python.framework/Versions/3.13/lib/python3.13/site-packages/requests/models.py:978: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\naccount_helper = <helpers.account_helper.AccountHelper object at 0x10c280050>\nprepared_user = user(login='sgureev+1749307891', password='123456789', email='sgureev+1749307891@mail.ru')\n\n    @pytest.fixture\n    def registered_user(account_helper, prepared_user):\n        login = prepared_user.login\n        password = prepared_user.password\n        email = prepared_user.email\n>       account_helper.register_new_user(login=login,password=password,email=email)\n\nconftest.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../helpers/account_helper.py:58: in register_new_user\n    register_response = self.dm_account_api.account_api.post_v1_account(registration_initialized_object)\n../dm_api_account/apis/account_api.py:30: in post_v1_account\n    response = self.post(\n../restclient/client.py:27: in post\n    return self._send_request(method=\"POST\", path=path, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nargs = (<dm_api_account.apis.account_api.AccountAPI object at 0x10c0bfa10>,)\nkwargs = {'json': {'email': 'sgureev+1749307891@mail.ru', 'login': 'sgureev+1749307891', 'password': '123456789'}, 'method': 'POST', 'path': '/v1/account'}\nbody = {'email': 'sgureev+1749307891@mail.ru', 'login': 'sgureev+1749307891', 'password': '123456789'}\nresponse = <Response [201]>\ncurl = 'curl -X POST -H \\'Accept: */*\\' -H \\'Accept-Encoding: gzip, deflate\\' -H \\'Connection: keep-alive\\' -H \\'Content-Leng...reev+1749307891\", \"password\": \"123456789\", \"email\": \"sgureev+1749307891@mail.ru\"}\\' http://5.63.153.31:5051/v1/account'\nresponse_text = ''\n\n    def wrapper(*args, **kwargs):\n        body = kwargs.get(\"json\")\n        if body:\n            allure.attach(\n                json.dumps(body, indent=4),\n                name=\"request_body\",\n                attachment_type=allure.attachment_type.JSON\n            )\n        response = fn(*args, **kwargs)\n        curl = curlify.to_curl(response.request)\n        allure.attach(curl, name='curl', attachment_type=allure.attachment_type.TEXT)\n        try:\n            response_json = response.json()\n    \n        except json.decoder.JSONDecodeError:\n            response_text = response.text\n>           status_code = f\"status code = {response.staus_code}\"\nE           AttributeError: 'Response' object has no attribute 'staus_code'. Did you mean: 'status_code'?\n\n../restclient/utilities.py:24: AttributeError"}, "attachments": [{"name": "stdout", "source": "04d453d2-a085-4b0d-bffb-7bf3888ab71b-attachment.txt", "type": "text/plain"}], "start": 1749307891130, "stop": 1749307891130, "uuid": "478f3a81-9f41-4e40-b069-aeb733e1df60", "historyId": "c0e29a08c0817db7b7a30045876cf331", "testCaseId": "c0e29a08c0817db7b7a30045876cf331", "fullName": "tests.change_email.test_change_email#test_change_email", "labels": [{"name": "parentSuite", "value": "tests.change_email"}, {"name": "suite", "value": "test_change_email"}, {"name": "host", "value": "sergeygureevs-MacBook-Pro.local"}, {"name": "thread", "value": "79350-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.change_email.test_change_email"}]}